exports[`Init > errors without env 1`] = `
{
  "logs": {
    "stderr": "Missing env. Expected one of node or web\\ninit failed."
  },
  "cwd": "packages/virmator/test-files/top-package",
  "error": {
    "name": "VirmatorNoTraceError"
  }
}
`;

exports[`Init > errors without package type 1`] = `
{
  "logs": {
    "stderr": "Missing package type. Expected one of mono-root, top-level-package, or mono-package\\ninit failed."
  },
  "cwd": "packages/virmator/test-files/top-package",
  "error": {
    "name": "VirmatorNoTraceError"
  }
}
`;

exports[`Init > initializes a mono-package node package 1`] = `
{
  "logs": {
    "stdout": "Installing tsx@4.16.5...\\nCopied .npmignore\\nCopied c8.config.json\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied package.json\\nCopied tsconfig.json\\nCopied typedoc.config.ts\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/mono-package",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"mono-package\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"description\\": \\"\\",\\n    \\"keywords\\": [],\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"main\\": \\"src/index.ts\\",\\n    \\"module\\": \\"src/index.ts\\",\\n    \\"types\\": \\"src/index.ts\\",\\n    \\"scripts\\": {\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"docs\\": \\"virmator docs\\",\\n        \\"start\\": \\"tsx src/index.ts\\",\\n        \\"test\\": \\"virmator test node\\",\\n        \\"test:coverage\\": \\"npm run test coverage\\",\\n        \\"test:docs\\": \\"virmator docs check\\",\\n        \\"test:update\\": \\"npm test update\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    },\\n    \\"publishConfig\\": {\\n        \\"access\\": \\"public\\"\\n    }\\n}",
    ".npmignore": ".*\\n.not-committed/\\n*.book-helper.*\\n*.book.*\\n*.d.ts.map\\n*.test-helper.*\\n*.test.*\\n*.tgz\\n**/*/readme-examples/\\n**/*/test/\\n/configs/\\n/coverage/\\n/cspell.config.cjs\\n/graphics/\\n/Icon?\\n/src/\\n/www-static/\\nbash-scripts/\\ndist-docs/\\neslint.config.mjs\\ngenerated-config-*\\nindex.html\\nprettier.config.mjs\\ntest-files/\\ntodo.md\\ntsconfig.*",
    "configs": {
      "c8.config.json": "{\\n    \\"100\\": true,\\n    \\"all\\": true,\\n    \\"checkCoverage\\": true,\\n    \\"clean\\": true,\\n    \\"exclude\\": [\\n        \\"**/*.test.ts\\",\\n        \\"**/*.example.ts\\",\\n        \\"**/*.test-helper.ts\\"\\n    ],\\n    \\"include\\": [\\n        \\"src/**/*.ts\\"\\n    ],\\n    \\"perFile\\": true,\\n    \\"reporter\\": [\\n        \\"html\\",\\n        \\"istanbul-smart-text-reporter\\"\\n    ],\\n    \\"skipFull\\": true\\n}\\n",
      "typedoc.config.ts": "import {baseTypedocConfig} from '@virmator/docs/configs/typedoc.config.base';\\nimport {join, resolve} from 'node:path';\\nimport type {TypeDocOptions} from 'typedoc';\\n\\nconst repoRoot = resolve(\\n    __dirname,\\n    /** Go up two directories because this gets compiled into \`node_modules/.virmator\` */\\n    '..',\\n    '..',\\n);\\nconst indexTsFile = join(repoRoot, 'src', 'index.ts');\\n\\nexport const typeDocConfig: Partial<TypeDocOptions> = {\\n    ...baseTypedocConfig,\\n    out: join(repoRoot, 'dist-docs'),\\n    entryPoints: [\\n        indexTsFile,\\n    ],\\n    intentionallyNotExported: [],\\n    defaultCategory: 'MISSING CATEGORY',\\n    categoryOrder: [\\n        'Main',\\n        'Internal',\\n    ],\\n};\\n"
    },
    "tsconfig.json": "{\\n    \\"compilerOptions\\": {\\n        \\"outDir\\": \\"./dist/\\",\\n        \\"rootDir\\": \\"./src/\\"\\n    },\\n    \\"exclude\\": [\\n        \\"./configs/\\",\\n        \\"./coverage/\\",\\n        \\"./dist/\\",\\n        \\"./dist-*/\\",\\n        \\"./node_modules/\\",\\n        \\"./test-files/\\"\\n    ],\\n    \\"extends\\": \\"../../configs/tsconfig.base.json\\"\\n}\\n"
  }
}
`;

exports[`Init > initializes a mono-package web package 1`] = `
{
  "logs": {
    "stdout": "Installing element-vir@22.2.2...\\nCopied _redirects\\nCopied .npmignore\\nCopied index.css\\nCopied index.html\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied package.json\\nCopied tsconfig.json\\nCopied typedoc.config.ts\\nCopied vir-app.element.ts\\nCopied vite.config.ts\\nCopied web-test-runner.config.mjs\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/mono-package",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"mono-package\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"description\\": \\"\\",\\n    \\"keywords\\": [],\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"main\\": \\"src/index.ts\\",\\n    \\"module\\": \\"src/index.ts\\",\\n    \\"types\\": \\"src/index.ts\\",\\n    \\"scripts\\": {\\n        \\"build\\": \\"virmator frontend build\\",\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"docs\\": \\"virmator docs\\",\\n        \\"start\\": \\"virmator frontend\\",\\n        \\"test\\": \\"virmator test web\\",\\n        \\"test:coverage\\": \\"npm run test coverage\\",\\n        \\"test:docs\\": \\"virmator docs check\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    },\\n    \\"publishConfig\\": {\\n        \\"access\\": \\"public\\"\\n    }\\n}",
    ".npmignore": ".*\\n.not-committed/\\n*.book-helper.*\\n*.book.*\\n*.d.ts.map\\n*.test-helper.*\\n*.test.*\\n*.tgz\\n**/*/readme-examples/\\n**/*/test/\\n/configs/\\n/coverage/\\n/cspell.config.cjs\\n/graphics/\\n/Icon?\\n/src/\\n/www-static/\\nbash-scripts/\\ndist-docs/\\neslint.config.mjs\\ngenerated-config-*\\nindex.html\\nprettier.config.mjs\\ntest-files/\\ntodo.md\\ntsconfig.*",
    "configs": {
      "typedoc.config.ts": "import {baseTypedocConfig} from '@virmator/docs/configs/typedoc.config.base';\\nimport {join, resolve} from 'node:path';\\nimport type {TypeDocOptions} from 'typedoc';\\n\\nconst repoRoot = resolve(\\n    __dirname,\\n    /** Go up two directories because this gets compiled into \`node_modules/.virmator\` */\\n    '..',\\n    '..',\\n);\\nconst indexTsFile = join(repoRoot, 'src', 'index.ts');\\n\\nexport const typeDocConfig: Partial<TypeDocOptions> = {\\n    ...baseTypedocConfig,\\n    out: join(repoRoot, 'dist-docs'),\\n    entryPoints: [\\n        indexTsFile,\\n    ],\\n    intentionallyNotExported: [],\\n    defaultCategory: 'MISSING CATEGORY',\\n    categoryOrder: [\\n        'Main',\\n        'Internal',\\n    ],\\n};\\n",
      "vite.config.ts": "import {defineConfig} from '@virmator/frontend/configs/vite.config.base.ts';\\nimport {resolve} from 'node:path';\\n\\nexport default defineConfig(\\n    {\\n        forGitHubPages: true,\\n        packageDirPath: resolve(import.meta.dirname, '..'),\\n    },\\n    (baseConfig) => {\\n        return {\\n            ...baseConfig,\\n        };\\n    },\\n);\\n",
      "web-test-runner.config.mjs": "import {getWebTestRunnerConfigWithCoveragePercent} from '@virmator/test/configs/web-test-runner.config.base.mjs';\\nimport {dirname} from 'path';\\nimport {fileURLToPath, pathToFileURL} from 'url';\\n\\nconst baseConfig = getWebTestRunnerConfigWithCoveragePercent({\\n    coveragePercent: 100,\\n    packageRootDirPath: dirname(dirname(fileURLToPath(import.meta.url))),\\n    extraScreenshotOptions: {},\\n});\\n\\n/** @type {import('@web/test-runner').TestRunnerConfig} */\\nconst webTestRunnerConfig = {\\n    ...baseConfig,\\n};\\n\\nexport default webTestRunnerConfig;\\n\\n/** Log the full config if this file file is run directly as a script, for debugging. */\\nif (import.meta.url === pathToFileURL(process.argv[1]).href) {\\n    console.info(JSON.stringify(webTestRunnerConfig, null, 4));\\n}\\n"
    },
    "src": {
      "index.html": "<!doctype html>\\n<html>\\n    <head>\\n        <title>Page Name</title>\\n        <meta name=\\"viewport\\" content=\\"width=device-width, minimum-scale=1.0, maximum-scale=1.0\\" />\\n        <script type=\\"module\\" src=\\"./ui/elements/vir-app.element.ts\\"></script>\\n        <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />\\n    </head>\\n    <body>\\n        <vir-app></vir-app>\\n    </body>\\n</html>\\n",
      "ui": {
        "elements": {
          "vir-app.element.ts": "import {defineElementNoInputs, html} from 'element-vir';\\n\\nexport const VirApp = defineElementNoInputs({\\n    tagName: 'vir-app',\\n    renderCallback() {\\n        return html\`\\n            Vir App goes here!\\n        \`;\\n    },\\n});\\n"
        }
      }
    },
    "tsconfig.json": "{\\n    \\"compilerOptions\\": {\\n        \\"outDir\\": \\"./dist/\\",\\n        \\"rootDir\\": \\"./src/\\"\\n    },\\n    \\"exclude\\": [\\n        \\"./configs/\\",\\n        \\"./coverage/\\",\\n        \\"./dist/\\",\\n        \\"./dist-*/\\",\\n        \\"./node_modules/\\",\\n        \\"./test-files/\\"\\n    ],\\n    \\"extends\\": \\"../../configs/tsconfig.base.json\\"\\n}\\n",
    "www-static": {
      "_redirects": "/* /index.html 200\\n",
      "index.css": "html,\\nbody {\\n    margin: 0;\\n    padding: 0;\\n    height: 100%;\\n    width: 100%;\\n}\\n"
    }
  }
}
`;

exports[`Init > initializes a mono-root node package 1`] = `
{
  "logs": {
    "stdout": "Copied .gitattributes\\nCopied .gitignore\\nCopied .nvmrc\\nCopied .prettierignore\\nCopied build-for-gh-pages.yml\\nCopied cspell.config.cjs\\nCopied dep-cruiser.config.cts\\nCopied eslint.config.mjs\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied ncu.config.ts\\nCopied package.json\\nCopied prettier.config.mjs\\nCopied settings.json\\nCopied tagged-release.yml\\nCopied tests.yml\\nCopied tsconfig.base.json\\nCopied tsconfig.eslint.json\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/mono-root",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"mono-root\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"version\\": \\"0.0.0\\",\\n    \\"private\\": true,\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"workspaces\\": [\\n        \\"packages/*\\"\\n    ],\\n    \\"scripts\\": {\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"format\\": \\"virmator format\\",\\n        \\"lint\\": \\"virmator lint fix\\",\\n        \\"publish\\": \\"virmator publish npm run test:all\\",\\n        \\"test\\": \\"mono-vir for-each-async npm run test\\",\\n        \\"test:all\\": \\"npm run compile && concurrently --colors --kill-others-on-fail -c auto --names tests,spelling,format,docs,deps,lint \\\\\\"npm run test:coverage\\\\\\" \\\\\\"npm run test:spelling\\\\\\" \\\\\\"npm run test:format\\\\\\" \\\\\\"npm run test:docs\\\\\\" \\\\\\"npm run test:deps\\\\\\" \\\\\\"npm run test:lint\\\\\\"\\",\\n        \\"test:coverage\\": \\"mono-vir for-each-async npm run test:coverage\\",\\n        \\"test:deps\\": \\"virmator deps check\\",\\n        \\"test:docs\\": \\"virmator docs check\\",\\n        \\"test:format\\": \\"virmator format check\\",\\n        \\"test:lint\\": \\"virmator lint\\",\\n        \\"test:spelling\\": \\"virmator spellcheck\\",\\n        \\"test:update\\": \\"mono-vir for-each-async npm run test:update\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    }\\n}",
    ".nvmrc": "22",
    ".prettierignore": "**/all-files-for-code-coverage.test.ts\\n**/coverage/\\n**/dist-*/\\n**/dist/\\n**/generated-config-*\\n**/graphics/\\n**/node_modules/\\n**/package-lock.json\\n**/tsconfig.tsbuildinfo\\n/Icon?",
    ".vscode": {
      "settings.json": "{\\n    \\"[css]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[html]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascriptreact]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[json]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[jsonc]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[less]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[markdown]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[ruby]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[scss]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[toml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[typescript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[yaml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"editor.formatOnSave\\": true,\\n    \\"editor.rulers\\": [\\n        100\\n    ],\\n    \\"editor.wordWrapColumn\\": 100,\\n    \\"files.associations\\": {\\n        \\"*.svg\\": \\"html\\"\\n    },\\n    \\"typescript.tsdk\\": \\"node_modules/typescript/lib\\"\\n}\\n"
    },
    "configs": {
      "dep-cruiser.config.cts": "import {generateDepCruiserConfig} from '@virmator/deps/configs/dep-cruiser.config.base';\\nimport type {IConfiguration} from 'dependency-cruiser';\\n\\nconst baseConfig = generateDepCruiserConfig({\\n    fileExceptions: {\\n        // enter file exceptions by rule name here\\n        'no-orphans': {\\n            from: [\\n                'src/index.ts',\\n            ],\\n        },\\n    },\\n    omitRules: [\\n        // enter rule names here to omit\\n    ],\\n});\\n\\nconst depCruiserConfig: IConfiguration = {\\n    ...baseConfig,\\n};\\n\\nmodule.exports = depCruiserConfig;\\n",
      "ncu.config.ts": "import {baseNcuConfig} from '@virmator/deps/configs/ncu.config.base';\\nimport {RunOptions} from 'npm-check-updates';\\n\\nexport const ncuConfig: RunOptions = {\\n    ...baseNcuConfig,\\n    // exclude these\\n    reject: [\\n        ...baseNcuConfig.reject,\\n    ],\\n    // include only these\\n    filter: [],\\n};\\n",
      "tsconfig.base.json": "{\\n    \\"compilerOptions\\": {\\n        \\"composite\\": true\\n    },\\n    \\"extends\\": \\"@virmator/compile/configs/tsconfig.base.json\\"\\n}\\n",
      "tsconfig.eslint.json": "{\\n    \\"compilerOptions\\": {\\n        \\"rootDir\\": \\"..\\"\\n    },\\n    \\"extends\\": \\"./tsconfig.base.json\\",\\n    \\"include\\": [\\"../packages/**/*.ts\\"]\\n}\\n"
    },
    "cspell.config.cjs": "const {baseConfig} = require('@virmator/spellcheck/configs/cspell.config.base.cjs');\\n\\nmodule.exports = {\\n    ...baseConfig,\\n    ignorePaths: [\\n        ...baseConfig.ignorePaths,\\n    ],\\n    words: [\\n        ...baseConfig.words,\\n    ],\\n};\\n",
    "eslint.config.mjs": "import {defineEslintConfig} from '@virmator/lint/configs/eslint.config.base.mjs';\\nimport {dirname} from 'node:path';\\nimport {fileURLToPath} from 'node:url';\\n\\nconst __dirname = dirname(fileURLToPath(import.meta.url));\\n\\nexport default [\\n    ...defineEslintConfig(__dirname),\\n    {\\n        ignores: [\\n            /** Add file globs that should be ignored. */\\n        ],\\n    },\\n    {\\n        rules: {\\n            /**\\n             * Turn off or on specific rules. See {@link defineEslintConfig} for which plugins are\\n             * already enabled.\\n             */\\n        },\\n    },\\n];\\n",
    "prettier.config.mjs": "import {basePrettierConfig} from '@virmator/format/configs/prettier.config.base.mjs';\\n\\n/**\\n * @typedef {import('prettier-plugin-multiline-arrays').MultilineArrayOptions} MultilineOptions\\n *\\n * @typedef {import('prettier').Options} PrettierOptions\\n * @type {PrettierOptions & MultilineOptions}\\n */\\nconst prettierConfig = {\\n    ...basePrettierConfig,\\n};\\n\\nexport default prettierConfig;\\n"
  }
}
`;

exports[`Init > initializes a mono-root web package 1`] = `
{
  "logs": {
    "stdout": "Copied .gitattributes\\nCopied .gitignore\\nCopied .nvmrc\\nCopied .prettierignore\\nCopied build-for-gh-pages.yml\\nCopied cspell.config.cjs\\nCopied dep-cruiser.config.cts\\nCopied eslint.config.mjs\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied ncu.config.ts\\nCopied package.json\\nCopied prettier.config.mjs\\nCopied settings.json\\nCopied tagged-release.yml\\nCopied tests.yml\\nCopied tsconfig.base.json\\nCopied tsconfig.eslint.json\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/mono-root",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"mono-root\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"version\\": \\"0.0.0\\",\\n    \\"private\\": true,\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"workspaces\\": [\\n        \\"packages/*\\"\\n    ],\\n    \\"scripts\\": {\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"format\\": \\"virmator format\\",\\n        \\"lint\\": \\"virmator lint fix\\",\\n        \\"publish\\": \\"virmator publish npm run test:all\\",\\n        \\"test\\": \\"mono-vir for-each-async npm run test\\",\\n        \\"test:all\\": \\"npm run compile && concurrently --colors --kill-others-on-fail -c auto --names tests,spelling,format,docs,deps,lint \\\\\\"npm run test:coverage\\\\\\" \\\\\\"npm run test:spelling\\\\\\" \\\\\\"npm run test:format\\\\\\" \\\\\\"npm run test:docs\\\\\\" \\\\\\"npm run test:deps\\\\\\" \\\\\\"npm run test:lint\\\\\\"\\",\\n        \\"test:coverage\\": \\"mono-vir for-each-async npm run test:coverage\\",\\n        \\"test:deps\\": \\"virmator deps check\\",\\n        \\"test:docs\\": \\"virmator docs check\\",\\n        \\"test:format\\": \\"virmator format check\\",\\n        \\"test:lint\\": \\"virmator lint\\",\\n        \\"test:spelling\\": \\"virmator spellcheck\\",\\n        \\"test:update\\": \\"mono-vir for-each-async npm run test:update\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    }\\n}",
    ".nvmrc": "22",
    ".prettierignore": "**/all-files-for-code-coverage.test.ts\\n**/coverage/\\n**/dist-*/\\n**/dist/\\n**/generated-config-*\\n**/graphics/\\n**/node_modules/\\n**/package-lock.json\\n**/tsconfig.tsbuildinfo\\n/Icon?",
    ".vscode": {
      "settings.json": "{\\n    \\"[css]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[html]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascriptreact]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[json]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[jsonc]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[less]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[markdown]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[ruby]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[scss]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[toml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[typescript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[yaml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"editor.formatOnSave\\": true,\\n    \\"editor.rulers\\": [\\n        100\\n    ],\\n    \\"editor.wordWrapColumn\\": 100,\\n    \\"files.associations\\": {\\n        \\"*.svg\\": \\"html\\"\\n    },\\n    \\"typescript.tsdk\\": \\"node_modules/typescript/lib\\"\\n}\\n"
    },
    "configs": {
      "dep-cruiser.config.cts": "import {generateDepCruiserConfig} from '@virmator/deps/configs/dep-cruiser.config.base';\\nimport type {IConfiguration} from 'dependency-cruiser';\\n\\nconst baseConfig = generateDepCruiserConfig({\\n    fileExceptions: {\\n        // enter file exceptions by rule name here\\n        'no-orphans': {\\n            from: [\\n                'src/index.ts',\\n            ],\\n        },\\n    },\\n    omitRules: [\\n        // enter rule names here to omit\\n    ],\\n});\\n\\nconst depCruiserConfig: IConfiguration = {\\n    ...baseConfig,\\n};\\n\\nmodule.exports = depCruiserConfig;\\n",
      "ncu.config.ts": "import {baseNcuConfig} from '@virmator/deps/configs/ncu.config.base';\\nimport {RunOptions} from 'npm-check-updates';\\n\\nexport const ncuConfig: RunOptions = {\\n    ...baseNcuConfig,\\n    // exclude these\\n    reject: [\\n        ...baseNcuConfig.reject,\\n    ],\\n    // include only these\\n    filter: [],\\n};\\n",
      "tsconfig.base.json": "{\\n    \\"compilerOptions\\": {\\n        \\"composite\\": true\\n    },\\n    \\"extends\\": \\"@virmator/compile/configs/tsconfig.base.json\\"\\n}\\n",
      "tsconfig.eslint.json": "{\\n    \\"compilerOptions\\": {\\n        \\"rootDir\\": \\"..\\"\\n    },\\n    \\"extends\\": \\"./tsconfig.base.json\\",\\n    \\"include\\": [\\"../packages/**/*.ts\\"]\\n}\\n"
    },
    "cspell.config.cjs": "const {baseConfig} = require('@virmator/spellcheck/configs/cspell.config.base.cjs');\\n\\nmodule.exports = {\\n    ...baseConfig,\\n    ignorePaths: [\\n        ...baseConfig.ignorePaths,\\n    ],\\n    words: [\\n        ...baseConfig.words,\\n    ],\\n};\\n",
    "eslint.config.mjs": "import {defineEslintConfig} from '@virmator/lint/configs/eslint.config.base.mjs';\\nimport {dirname} from 'node:path';\\nimport {fileURLToPath} from 'node:url';\\n\\nconst __dirname = dirname(fileURLToPath(import.meta.url));\\n\\nexport default [\\n    ...defineEslintConfig(__dirname),\\n    {\\n        ignores: [\\n            /** Add file globs that should be ignored. */\\n        ],\\n    },\\n    {\\n        rules: {\\n            /**\\n             * Turn off or on specific rules. See {@link defineEslintConfig} for which plugins are\\n             * already enabled.\\n             */\\n        },\\n    },\\n];\\n",
    "prettier.config.mjs": "import {basePrettierConfig} from '@virmator/format/configs/prettier.config.base.mjs';\\n\\n/**\\n * @typedef {import('prettier-plugin-multiline-arrays').MultilineArrayOptions} MultilineOptions\\n *\\n * @typedef {import('prettier').Options} PrettierOptions\\n * @type {PrettierOptions & MultilineOptions}\\n */\\nconst prettierConfig = {\\n    ...basePrettierConfig,\\n};\\n\\nexport default prettierConfig;\\n"
  }
}
`;

exports[`Init > initializes a top-level node package 1`] = `
{
  "logs": {
    "stdout": "Installing tsx@4.16.5...\\nCopied .gitattributes\\nCopied .gitignore\\nCopied .npmignore\\nCopied .nvmrc\\nCopied .prettierignore\\nCopied build-for-gh-pages.yml\\nCopied c8.config.json\\nCopied cspell.config.cjs\\nCopied dep-cruiser.config.cts\\nCopied eslint.config.mjs\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied ncu.config.ts\\nCopied package.json\\nCopied prettier.config.mjs\\nCopied settings.json\\nCopied tagged-release.yml\\nCopied tests.yml\\nCopied tsconfig.json\\nCopied typedoc.config.ts\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/top-package",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"top-package\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"description\\": \\"\\",\\n    \\"keywords\\": [],\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"main\\": \\"src/index.ts\\",\\n    \\"module\\": \\"src/index.ts\\",\\n    \\"types\\": \\"src/index.ts\\",\\n    \\"scripts\\": {\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"docs\\": \\"virmator docs\\",\\n        \\"format\\": \\"virmator format\\",\\n        \\"lint\\": \\"virmator lint fix\\",\\n        \\"publish\\": \\"virmator publish npm run test:all\\",\\n        \\"start\\": \\"txs src/index.ts\\",\\n        \\"test\\": \\"virmator test node\\",\\n        \\"test:all\\": \\"npm run compile && concurrently --colors --kill-others-on-fail -c auto --names tests,spelling,format,docs,deps,lint \\\\\\"npm run test:coverage\\\\\\" \\\\\\"npm run test:spelling\\\\\\" \\\\\\"npm run test:format\\\\\\" \\\\\\"npm run test:docs\\\\\\" \\\\\\"npm run test:deps\\\\\\" \\\\\\"npm run test:lint\\\\\\"\\",\\n        \\"test:coverage\\": \\"npm run test coverage\\",\\n        \\"test:deps\\": \\"virmator deps check\\",\\n        \\"test:docs\\": \\"virmator docs check\\",\\n        \\"test:format\\": \\"virmator format check\\",\\n        \\"test:lint\\": \\"virmator lint\\",\\n        \\"test:spelling\\": \\"virmator spellcheck\\",\\n        \\"test:update\\": \\"npm run test update\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    }\\n}",
    ".npmignore": ".*\\n.not-committed/\\n*.book-helper.*\\n*.book.*\\n*.d.ts.map\\n*.test-helper.*\\n*.test.*\\n*.tgz\\n**/*/readme-examples/\\n**/*/test/\\n/configs/\\n/coverage/\\n/cspell.config.cjs\\n/graphics/\\n/Icon?\\n/src/\\n/www-static/\\nbash-scripts/\\ndist-docs/\\neslint.config.mjs\\ngenerated-config-*\\nindex.html\\nprettier.config.mjs\\ntest-files/\\ntodo.md\\ntsconfig.*",
    ".nvmrc": "22",
    ".prettierignore": "**/all-files-for-code-coverage.test.ts\\n**/coverage/\\n**/dist-*/\\n**/dist/\\n**/generated-config-*\\n**/graphics/\\n**/node_modules/\\n**/package-lock.json\\n**/tsconfig.tsbuildinfo\\n/Icon?",
    ".vscode": {
      "settings.json": "{\\n    \\"[css]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[html]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascriptreact]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[json]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[jsonc]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[less]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[markdown]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[ruby]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[scss]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[toml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[typescript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[yaml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"editor.formatOnSave\\": true,\\n    \\"editor.rulers\\": [\\n        100\\n    ],\\n    \\"editor.wordWrapColumn\\": 100,\\n    \\"files.associations\\": {\\n        \\"*.svg\\": \\"html\\"\\n    },\\n    \\"typescript.tsdk\\": \\"node_modules/typescript/lib\\"\\n}\\n"
    },
    "configs": {
      "c8.config.json": "{\\n    \\"100\\": true,\\n    \\"all\\": true,\\n    \\"checkCoverage\\": true,\\n    \\"clean\\": true,\\n    \\"exclude\\": [\\n        \\"**/*.test.ts\\",\\n        \\"**/*.example.ts\\",\\n        \\"**/*.test-helper.ts\\"\\n    ],\\n    \\"include\\": [\\n        \\"src/**/*.ts\\"\\n    ],\\n    \\"perFile\\": true,\\n    \\"reporter\\": [\\n        \\"html\\",\\n        \\"istanbul-smart-text-reporter\\"\\n    ],\\n    \\"skipFull\\": true\\n}\\n",
      "dep-cruiser.config.cts": "import {generateDepCruiserConfig} from '@virmator/deps/configs/dep-cruiser.config.base';\\nimport type {IConfiguration} from 'dependency-cruiser';\\n\\nconst baseConfig = generateDepCruiserConfig({\\n    fileExceptions: {\\n        // enter file exceptions by rule name here\\n        'no-orphans': {\\n            from: [\\n                'src/index.ts',\\n            ],\\n        },\\n    },\\n    omitRules: [\\n        // enter rule names here to omit\\n    ],\\n});\\n\\nconst depCruiserConfig: IConfiguration = {\\n    ...baseConfig,\\n};\\n\\nmodule.exports = depCruiserConfig;\\n",
      "ncu.config.ts": "import {baseNcuConfig} from '@virmator/deps/configs/ncu.config.base';\\nimport {RunOptions} from 'npm-check-updates';\\n\\nexport const ncuConfig: RunOptions = {\\n    ...baseNcuConfig,\\n    // exclude these\\n    reject: [\\n        ...baseNcuConfig.reject,\\n    ],\\n    // include only these\\n    filter: [],\\n};\\n",
      "typedoc.config.ts": "import {baseTypedocConfig} from '@virmator/docs/configs/typedoc.config.base';\\nimport {join, resolve} from 'node:path';\\nimport type {TypeDocOptions} from 'typedoc';\\n\\nconst repoRoot = resolve(\\n    __dirname,\\n    /** Go up two directories because this gets compiled into \`node_modules/.virmator\` */\\n    '..',\\n    '..',\\n);\\nconst indexTsFile = join(repoRoot, 'src', 'index.ts');\\n\\nexport const typeDocConfig: Partial<TypeDocOptions> = {\\n    ...baseTypedocConfig,\\n    out: join(repoRoot, 'dist-docs'),\\n    entryPoints: [\\n        indexTsFile,\\n    ],\\n    intentionallyNotExported: [],\\n    defaultCategory: 'MISSING CATEGORY',\\n    categoryOrder: [\\n        'Main',\\n        'Internal',\\n    ],\\n};\\n"
    },
    "cspell.config.cjs": "const {baseConfig} = require('@virmator/spellcheck/configs/cspell.config.base.cjs');\\n\\nmodule.exports = {\\n    ...baseConfig,\\n    ignorePaths: [\\n        ...baseConfig.ignorePaths,\\n    ],\\n    words: [\\n        ...baseConfig.words,\\n    ],\\n};\\n",
    "eslint.config.mjs": "import {defineEslintConfig} from '@virmator/lint/configs/eslint.config.base.mjs';\\nimport {dirname} from 'node:path';\\nimport {fileURLToPath} from 'node:url';\\n\\nconst __dirname = dirname(fileURLToPath(import.meta.url));\\n\\nexport default [\\n    ...defineEslintConfig(__dirname),\\n    {\\n        ignores: [\\n            /** Add file globs that should be ignored. */\\n        ],\\n    },\\n    {\\n        rules: {\\n            /**\\n             * Turn off or on specific rules. See {@link defineEslintConfig} for which plugins are\\n             * already enabled.\\n             */\\n        },\\n    },\\n];\\n",
    "prettier.config.mjs": "import {basePrettierConfig} from '@virmator/format/configs/prettier.config.base.mjs';\\n\\n/**\\n * @typedef {import('prettier-plugin-multiline-arrays').MultilineArrayOptions} MultilineOptions\\n *\\n * @typedef {import('prettier').Options} PrettierOptions\\n * @type {PrettierOptions & MultilineOptions}\\n */\\nconst prettierConfig = {\\n    ...basePrettierConfig,\\n};\\n\\nexport default prettierConfig;\\n",
    "tsconfig.json": "{\\n    \\"compilerOptions\\": {\\n        \\"outDir\\": \\"./dist/\\",\\n        \\"rootDir\\": \\"./src/\\"\\n    },\\n    \\"exclude\\": [\\n        \\"./configs/\\",\\n        \\"./coverage/\\",\\n        \\"./dist/\\",\\n        \\"./dist-*/\\",\\n        \\"./node_modules/\\",\\n        \\"./test-files/\\"\\n    ],\\n    \\"extends\\": \\"@virmator/compile/configs/tsconfig.base.json\\"\\n}\\n"
  }
}
`;

exports[`Init > initializes a top-level web package 1`] = `
{
  "logs": {
    "stdout": "Installing element-vir@22.2.2...\\nCopied _redirects\\nCopied .gitattributes\\nCopied .gitignore\\nCopied .npmignore\\nCopied .nvmrc\\nCopied .prettierignore\\nCopied build-for-gh-pages.yml\\nCopied cspell.config.cjs\\nCopied dep-cruiser.config.cts\\nCopied eslint.config.mjs\\nCopied index.css\\nCopied index.html\\nCopied LICENSE-CC0\\nCopied LICENSE-MIT\\nCopied ncu.config.ts\\nCopied package.json\\nCopied prettier.config.mjs\\nCopied settings.json\\nCopied tagged-release.yml\\nCopied tests.yml\\nCopied tsconfig.json\\nCopied typedoc.config.ts\\nCopied vir-app.element.ts\\nCopied vite.config.ts\\nCopied web-test-runner.config.mjs\\ninit finished."
  },
  "cwd": "packages/virmator/test-files/top-package",
  "contentsDiff": {
    "package.json": "{\\n    \\"name\\": \\"top-package\\",\\n    \\"homepage\\": \\"https://github.com/electrovir/virmator\\",\\n    \\"bugs\\": {\\n        \\"url\\": \\"https://github.com/electrovir/virmator/issues\\"\\n    },\\n    \\"repository\\": {\\n        \\"type\\": \\"git\\",\\n        \\"url\\": \\"git+https://github.com/electrovir/virmator.git\\"\\n    },\\n    \\"author\\": {\\n        \\"name\\": \\"electrovir\\",\\n        \\"url\\": \\"https://github.com/electrovir\\"\\n    },\\n    \\"description\\": \\"\\",\\n    \\"keywords\\": [],\\n    \\"license\\": \\"(MIT or CC0 1.0)\\",\\n    \\"type\\": \\"module\\",\\n    \\"main\\": \\"src/index.ts\\",\\n    \\"module\\": \\"src/index.ts\\",\\n    \\"types\\": \\"src/index.ts\\",\\n    \\"scripts\\": {\\n        \\"build\\": \\"virmator frontend build\\",\\n        \\"compile\\": \\"virmator compile\\",\\n        \\"docs\\": \\"virmator docs\\",\\n        \\"format\\": \\"virmator format\\",\\n        \\"lint\\": \\"virmator lint fix\\",\\n        \\"publish\\": \\"virmator publish npm run test:all\\",\\n        \\"start\\": \\"virmator frontend\\",\\n        \\"test\\": \\"virmator test web\\",\\n        \\"test:all\\": \\"npm run compile && concurrently --colors --kill-others-on-fail -c auto --names tests,spelling,format,docs,deps,lint \\\\\\"npm run test:coverage\\\\\\" \\\\\\"npm run test:spelling\\\\\\" \\\\\\"npm run test:format\\\\\\" \\\\\\"npm run test:docs\\\\\\" \\\\\\"npm run test:deps\\\\\\" \\\\\\"npm run test:lint\\\\\\"\\",\\n        \\"test:coverage\\": \\"npm run test coverage\\",\\n        \\"test:deps\\": \\"virmator deps check\\",\\n        \\"test:docs\\": \\"virmator docs check\\",\\n        \\"test:format\\": \\"virmator format check\\",\\n        \\"test:lint\\": \\"virmator lint\\",\\n        \\"test:spelling\\": \\"virmator spellcheck\\"\\n    },\\n    \\"engines\\": {\\n        \\"node\\": \\">=22\\"\\n    }\\n}",
    ".npmignore": ".*\\n.not-committed/\\n*.book-helper.*\\n*.book.*\\n*.d.ts.map\\n*.test-helper.*\\n*.test.*\\n*.tgz\\n**/*/readme-examples/\\n**/*/test/\\n/configs/\\n/coverage/\\n/cspell.config.cjs\\n/graphics/\\n/Icon?\\n/src/\\n/www-static/\\nbash-scripts/\\ndist-docs/\\neslint.config.mjs\\ngenerated-config-*\\nindex.html\\nprettier.config.mjs\\ntest-files/\\ntodo.md\\ntsconfig.*",
    ".nvmrc": "22",
    ".prettierignore": "**/all-files-for-code-coverage.test.ts\\n**/coverage/\\n**/dist-*/\\n**/dist/\\n**/generated-config-*\\n**/graphics/\\n**/node_modules/\\n**/package-lock.json\\n**/tsconfig.tsbuildinfo\\n/Icon?",
    ".vscode": {
      "settings.json": "{\\n    \\"[css]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[html]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[javascriptreact]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[json]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[jsonc]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[less]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[markdown]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[ruby]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[scss]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[toml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[typescript]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"[yaml]\\": {\\n        \\"editor.defaultFormatter\\": \\"esbenp.prettier-vscode\\"\\n    },\\n    \\"editor.formatOnSave\\": true,\\n    \\"editor.rulers\\": [\\n        100\\n    ],\\n    \\"editor.wordWrapColumn\\": 100,\\n    \\"files.associations\\": {\\n        \\"*.svg\\": \\"html\\"\\n    },\\n    \\"typescript.tsdk\\": \\"node_modules/typescript/lib\\"\\n}\\n"
    },
    "configs": {
      "dep-cruiser.config.cts": "import {generateDepCruiserConfig} from '@virmator/deps/configs/dep-cruiser.config.base';\\nimport type {IConfiguration} from 'dependency-cruiser';\\n\\nconst baseConfig = generateDepCruiserConfig({\\n    fileExceptions: {\\n        // enter file exceptions by rule name here\\n        'no-orphans': {\\n            from: [\\n                'src/index.ts',\\n            ],\\n        },\\n    },\\n    omitRules: [\\n        // enter rule names here to omit\\n    ],\\n});\\n\\nconst depCruiserConfig: IConfiguration = {\\n    ...baseConfig,\\n};\\n\\nmodule.exports = depCruiserConfig;\\n",
      "ncu.config.ts": "import {baseNcuConfig} from '@virmator/deps/configs/ncu.config.base';\\nimport {RunOptions} from 'npm-check-updates';\\n\\nexport const ncuConfig: RunOptions = {\\n    ...baseNcuConfig,\\n    // exclude these\\n    reject: [\\n        ...baseNcuConfig.reject,\\n    ],\\n    // include only these\\n    filter: [],\\n};\\n",
      "typedoc.config.ts": "import {baseTypedocConfig} from '@virmator/docs/configs/typedoc.config.base';\\nimport {join, resolve} from 'node:path';\\nimport type {TypeDocOptions} from 'typedoc';\\n\\nconst repoRoot = resolve(\\n    __dirname,\\n    /** Go up two directories because this gets compiled into \`node_modules/.virmator\` */\\n    '..',\\n    '..',\\n);\\nconst indexTsFile = join(repoRoot, 'src', 'index.ts');\\n\\nexport const typeDocConfig: Partial<TypeDocOptions> = {\\n    ...baseTypedocConfig,\\n    out: join(repoRoot, 'dist-docs'),\\n    entryPoints: [\\n        indexTsFile,\\n    ],\\n    intentionallyNotExported: [],\\n    defaultCategory: 'MISSING CATEGORY',\\n    categoryOrder: [\\n        'Main',\\n        'Internal',\\n    ],\\n};\\n",
      "vite.config.ts": "import {defineConfig} from '@virmator/frontend/configs/vite.config.base.ts';\\nimport {resolve} from 'node:path';\\n\\nexport default defineConfig(\\n    {\\n        forGitHubPages: true,\\n        packageDirPath: resolve(import.meta.dirname, '..'),\\n    },\\n    (baseConfig) => {\\n        return {\\n            ...baseConfig,\\n        };\\n    },\\n);\\n",
      "web-test-runner.config.mjs": "import {getWebTestRunnerConfigWithCoveragePercent} from '@virmator/test/configs/web-test-runner.config.base.mjs';\\nimport {dirname} from 'path';\\nimport {fileURLToPath, pathToFileURL} from 'url';\\n\\nconst baseConfig = getWebTestRunnerConfigWithCoveragePercent({\\n    coveragePercent: 100,\\n    packageRootDirPath: dirname(dirname(fileURLToPath(import.meta.url))),\\n    extraScreenshotOptions: {},\\n});\\n\\n/** @type {import('@web/test-runner').TestRunnerConfig} */\\nconst webTestRunnerConfig = {\\n    ...baseConfig,\\n};\\n\\nexport default webTestRunnerConfig;\\n\\n/** Log the full config if this file file is run directly as a script, for debugging. */\\nif (import.meta.url === pathToFileURL(process.argv[1]).href) {\\n    console.info(JSON.stringify(webTestRunnerConfig, null, 4));\\n}\\n"
    },
    "cspell.config.cjs": "const {baseConfig} = require('@virmator/spellcheck/configs/cspell.config.base.cjs');\\n\\nmodule.exports = {\\n    ...baseConfig,\\n    ignorePaths: [\\n        ...baseConfig.ignorePaths,\\n    ],\\n    words: [\\n        ...baseConfig.words,\\n    ],\\n};\\n",
    "eslint.config.mjs": "import {defineEslintConfig} from '@virmator/lint/configs/eslint.config.base.mjs';\\nimport {dirname} from 'node:path';\\nimport {fileURLToPath} from 'node:url';\\n\\nconst __dirname = dirname(fileURLToPath(import.meta.url));\\n\\nexport default [\\n    ...defineEslintConfig(__dirname),\\n    {\\n        ignores: [\\n            /** Add file globs that should be ignored. */\\n        ],\\n    },\\n    {\\n        rules: {\\n            /**\\n             * Turn off or on specific rules. See {@link defineEslintConfig} for which plugins are\\n             * already enabled.\\n             */\\n        },\\n    },\\n];\\n",
    "prettier.config.mjs": "import {basePrettierConfig} from '@virmator/format/configs/prettier.config.base.mjs';\\n\\n/**\\n * @typedef {import('prettier-plugin-multiline-arrays').MultilineArrayOptions} MultilineOptions\\n *\\n * @typedef {import('prettier').Options} PrettierOptions\\n * @type {PrettierOptions & MultilineOptions}\\n */\\nconst prettierConfig = {\\n    ...basePrettierConfig,\\n};\\n\\nexport default prettierConfig;\\n",
    "src": {
      "index.html": "<!doctype html>\\n<html>\\n    <head>\\n        <title>Page Name</title>\\n        <meta name=\\"viewport\\" content=\\"width=device-width, minimum-scale=1.0, maximum-scale=1.0\\" />\\n        <script type=\\"module\\" src=\\"./ui/elements/vir-app.element.ts\\"></script>\\n        <link rel=\\"stylesheet\\" type=\\"text/css\\" href=\\"/index.css\\" />\\n    </head>\\n    <body>\\n        <vir-app></vir-app>\\n    </body>\\n</html>\\n",
      "ui": {
        "elements": {
          "vir-app.element.ts": "import {defineElementNoInputs, html} from 'element-vir';\\n\\nexport const VirApp = defineElementNoInputs({\\n    tagName: 'vir-app',\\n    renderCallback() {\\n        return html\`\\n            Vir App goes here!\\n        \`;\\n    },\\n});\\n"
        }
      }
    },
    "tsconfig.json": "{\\n    \\"compilerOptions\\": {\\n        \\"outDir\\": \\"./dist/\\",\\n        \\"rootDir\\": \\"./src/\\"\\n    },\\n    \\"exclude\\": [\\n        \\"./configs/\\",\\n        \\"./coverage/\\",\\n        \\"./dist/\\",\\n        \\"./dist-*/\\",\\n        \\"./node_modules/\\",\\n        \\"./test-files/\\"\\n    ],\\n    \\"extends\\": \\"@virmator/compile/configs/tsconfig.base.json\\"\\n}\\n",
    "www-static": {
      "_redirects": "/* /index.html 200\\n",
      "index.css": "html,\\nbody {\\n    margin: 0;\\n    padding: 0;\\n    height: 100%;\\n    width: 100%;\\n}\\n"
    }
  }
}
`;
